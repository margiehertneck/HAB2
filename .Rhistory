require(rCharts)
haireye <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group='Eye', type='multiBarChart',
data=subset(haireye, Sex=='Male')) #n1 has list elements/objects saved in it
n1$save('fig/n1.html', cdn=TRUE)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
graph_chart1.addHandler(function(type, e){
var data = e.evtData;
if (type === 'click'){
return alert("You clicked on car with mpg: " + data.mpg.in[0]);
}
})
# Back Up current options
BU.Option.cdn = options("rcharts.cdn")
BU.Option.viewer = options("viewer")
# Change Options to view rCharts Plots in browser
options(rcharts.cdn=TRUE)
options(viewer=NULL)
# Back Up current options
BU.Option.cdn = options("rcharts.cdn")
BU.Option.viewer = options("viewer")
# Change Options to view rCharts Plots in browser
options(rcharts.cdn=TRUE)
options(viewer=NULL)
##From Polychart, a javascript charting library based on the grammar of graphics, and inspired by ggplot2
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
# Restore Previous Settings
options(rcharts.cdn = BU.Option.cdn,
viewer = BU.Option.viewer)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
install.packages(c("manipulate", "Matrix", "XML"))
require(rCharts)
library(rCharts)
library("rCharts", lib.loc="C:/Program Files/R/R-3.2.0/library")
demo(package="rCharts")
demo(topic="datatables", package="rCharts")
demo(topic="morris", package="rCharts")
library("rCharts", lib.loc="C:/Program Files/R/R-3.2.0/library")
## Example 1 Facetted Scatterplot##############
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
require(rCharts)
demo(package="rCharts")
demo(topic="morris", package="rCharts")
require(rCharts)
demo(package="rCharts")
demo(topic="datatables", package="rCharts")
demo(topic="dimple", package="rCharts")
install.packages("rjson")
demo(topic="dimple", package="rCharts")
demo(topic="highcharts", package="rCharts")
demo(topic="leaflet", package="rCharts")
install.packages("ggmap")
demo(topic="leaflet", package="rCharts")
demo(topic="nvd3", package="rCharts")
demo(topic="polycharts", package="rCharts")
demo(topic="rickshaw", package="rCharts")
install.packages("quantmod")
demo(topic="rickshaw", package="rCharts")
demo(topic="xcharts", package="rCharts")
demo(topic="leaflet", package="rCharts")
demo(topic="leaflet", package="rCharts")
require(rCharts)
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
#...from lecture...
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
#...from lecture...
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
require(knitr)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
library("knitr", lib.loc="C:/Program Files/R/R-3.2.0/library")
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
haireye = as.data.frame(HairEyeColor)
n1 <- rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
n1$save('fig/n1.html', cdn = TRUE)
require(rCharts)
require(knitr)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE) # NOT WORKING
library("rCharts", lib.loc="C:/Program Files/R/R-3.2.0/library")
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
n1$save('fig/n1.html', cdn = TRUE) # NOT WORKING
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male'))
n1$save('fig/n1.html', cdn = TRUE) # NOT WORKING
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
# create and/or set working directory
dir <- "C:/Users/margie/Google Drive/Coursera_Data_Scientist/HighAltBaking"
ifelse(!dir.exists(file.path(dir)), dir.create(file.path(dir)), FALSE)
runApp("HighAltBaking")
library(shiny)
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
runApp("HighAltBaking")
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
time <- 60
timefunc <- function(time) {
time/30
} #endtimefunc
time/30
(time/30)*8
(time/30)*5
((time/30)*8)+time
((time/30)*5)-time
((time/30)*8)-time
time/30
time-((time/30)*5)
timex <- time-((time/30)*5)
timey <- time-((time/30)*8)
print(paste("Bake from ",timex, " to ",timey," degrees Fahrenheit."))
timey <- time-((time/30)*5)
timex <- time-((time/30)*8)
print(paste("Bake from",timex, "to",timey,"degrees Fahrenheit."))
timefunc <- function(time) {
timey <- time-((time/30)*5)
timex <- time-((time/30)*8)
print(paste("Bake from",timex, "to",timey,"minutes."))
} #endtimefunc
time <- 120
time(time)
timey <- time-((time/30)*5)
timex <- time-((time/30)*8)
print(paste("Bake from",timex, "to",timey,"minutes."))
timefunc(time)
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
timefunc <- function(minutes) {
timey <- minutes-((minutes/30)*5)
timex <- minutes-((minutes/30)*8)
print(paste("Instead of baking for",input$minutes,"minutes, bake from",timex, "to",timey,"minutes."))
} #endtimefunc
timefunc(60)
minutes <- 60
timefunc <- function(minutes) {
timey <- minutes-((minutes/30)*5)
timex <- minutes-((minutes/30)*8)
print(paste("Instead of baking for","input$minutes","minutes, bake from",timex, "to",timey,"minutes."))
} #endtimefunc
timefunc(60)
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='margiehertneck', token='03820A690E7ADD9EA0C0C9FE989FBCA9', secret='CBAumUdGZI9qLotDEAxQchP8FE2ccdeQo8nwhP2W')
library(shinyapps)
shinyapps::deployApp('C:/Users/margie/Google Drive/Coursera_Data_Scientist/HighAltBaking')
shiny::runApp('HighAltBaking')
shiny::runApp('HighAltBaking')
library("knitr", lib.loc="C:/Program Files/R/R-3.2.0/library")
library(shinyapps)
shinyapps::setAccountInfo(name='margiehertneck',
token='03820A690E7ADD9EA0C0C9FE989FBCA9',
secret='<SECRET>')
shinyapps::setAccountInfo(name='margiehertneck',
token='03820A690E7ADD9EA0C0C9FE989FBCA9',
secret='CBAumUdGZI9qLotDEAxQchP8FE2ccdeQo8nwhP2W')
deployApp('HighAltBaking')
slidify("index.html")
library(slidify)
slidify("index.html")
setwd(./HAB2)
setwd("./HAB2")
getwd()
slidify("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
